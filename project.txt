***CODE***

//Freddy & Tyler Project 1
//CST126 Project 1

#include <iostream>
#include <string>

using namespace std;

class Stock
{
public:
    string name;
    string symbol;
    float price;

    void get_info();

    void info()
    {
        std::cout << "Stock name: " << name << std::endl;
        std::cout << "Stock symbol: " << symbol << std::endl;
        std::cout << "Stock price: $" << price << std::endl;
        std::cout << "======================================" << std::endl;
    }
};


void Stock::get_info()
{
    std::cout << "Enter the name of the stock: ";
    std::cin >> name;
    std::cout << "Enter the symbol of the stock: ";
    std::cin >> symbol;
    std::cout << "Enter the price of the stock: ";
    std::cin >> price;
}



void build_list(Stock* arr, int n)
{
    int i;
    Stock sto;
    for (i = 0; i < n; i++)
    {
        sto.get_info();
        arr[i] = sto;
    }
}


Stock* remove(Stock* &arr, int &n)
{
    //return an array with a user specified stock removed.

    int i;
    string srch;
    auto *final_arr = new Stock [n-1]; //one array to hold the list if we find the correct stock
    auto *cop_arr = new Stock [n]; // one array to hold all values in case we don't find stock

    std::cout << "Enter the name for the stock that you would like to remove: ";
    std::cin >> srch;

    for (i = 0; i < n; i++)
    {
        if (arr[i].name == srch or arr[i].symbol == srch)
        {
            int j = i;
            n -= 1; //resize n so we stay in bounds of our shorter array
            while (j < n)
            {
                final_arr[j] = arr[j+1];//skip the index for the stock we want to remove.
                j++;
            }
            return final_arr;//return array with removed stock
        }
        else
        {
            final_arr[i] = arr[i];//update short array even if stock is not found in case stock is
            //found at the end of the array.

            cop_arr[i] = arr[i];// update the array in the case stock is never found.
        }
    }
    {
        std::cout << "**ERROR** Name or symbol did not match any stocks. Names and symbols are case sensitive. " << std::endl;
    }
    delete[] arr;
    return cop_arr;//return unchanged array when stock not found.
}


Stock* add(Stock* &arr, int &n)
{
    //return a resized array with an added stock

    int i;
    n += 1;
    auto *cop_arr = new Stock [n];

    for (i = 0; i < n-1; i++)
    {
        cop_arr[i] = arr[i];
    }
    cop_arr[n-1].get_info();
    delete[] arr;
    return cop_arr;
}


void lo_hi(Stock* arr, int n)
{
    int i, j;
    Stock temp;
    for (i = 0; i < n; i++)
    {
        for (j = 0; j < n; j++)
        {
            if (arr[j].price > arr[i].price)
            {
                std::swap(arr[i], arr[j]);
            }
        }
    }
}


void hi_lo(Stock* arr, int n)
{
    int i, j;
    Stock temp;
    for (i = 0; i < n; i++)
    {
        for (j = 0; j < n; j++)
        {
            if (arr[j].price < arr[i].price)
            {
                std::swap(arr[i], arr[j]);
            }
        }
    }
}


void edit(Stock* arr, int n)
{
    int i;
    bool flag = true; //error message control
    float val; //usr input for price change

    string x;// usr input for stock to be edited
    std::cout << "Please enter the name or symbol of the stock you would like to edit: ";
    std::cin >> x;
    for (i = 0; i < n; i++)
    {
        if (arr[i].name == x or arr[i].symbol == x)
        {
            std::cout << "Please enter the new price for the stock: ";
            std::cin >> val;
            arr[i].price = val;
            flag = false;
        }
    }
    if (flag)
    {
        std::cout << "**ERROR** Name or symbol did not match any stocks. Names and symbols are case sensitive." << std::endl;
    }
}


void display_all(Stock* arr, int n)
{
    int i;
    for (i=0; i < n; i ++)
        arr[i].info();
}


int display_menu(int& menu_choice)
{
    std::cout << "1) Add a new stock to collection.\n";
    std::cout << "2) Remove a stock from the collection.\n";
    std::cout << "3) Edit a stock price.\n";
    std::cout << "4) Sort stocks based on price from high to low.\n";
    std::cout << "5) Sort stocks based on price from low to high.\n";
    std::cout << "6) Display all stocks in the collection.\n";
    std::cout << "7) Exit Program.\n\n";
    std::cout << "Enter: ";
    std::cin >> menu_choice;
    if (menu_choice > 7 || menu_choice < 1)
    {
        std::cout << "Invalid Entry. Please enter a  number from the options list provided.\n\n\n\n" << std::endl;
        display_menu(menu_choice);
    }
    return 0;
}


Stock* process_menu(Stock* &arr, int& n, int menu_choice, int &flag)
{
    switch(menu_choice){
        case 1:
            arr = add(arr, n);
            break;

        case 2:
            arr = remove(arr, n);
            break;

        case 3:
            edit(arr, n);
            break;

        case 4:
            hi_lo(arr, n);
            break;

        case 5:
            lo_hi(arr, n);
            break;

        case 6:
            display_all(arr, n);
            break;

        case 7:
            std::cout << "ENDING PROGRAM..." << std::endl;
            flag = 0;
            break;

        default:
            break;
    }
    return arr;
}


int main()
{
    int n = 4;
    int menu_choice;
    int flag = 1; //loop control
    auto *arr = new Stock[n];

    std::cout << "Enter the number of stocks you would like to initially enter: ";
    std::cin >> n;
    build_list(arr, n);

    while (flag)
    {
        display_menu(menu_choice);
        arr = process_menu(arr, n, menu_choice, flag);
    }

    std::cout << "================================================================" << std::endl;
    std::cout <<  "PROGRAM CLOSING..." << std::endl;
    std::cout << "================================================================\n\n\n" << std::endl;
    delete[] arr;
    return 0;
}



***END CODE***

**
 PsuedoCode
 **
 1) Made 5 fucntions(add,edit,remove,hi to low, and low to high)
    this is a template to work on we can change later...
 2) Decide who would work on what function or we could work on it together and go step by step so we both understand what is going on in each fucntion
 3) Start a build Phase and work on each fucntion adding pieces and making sure they work
 4) Make sure we arent leaking memory
 5) Test Phase we should test each function seperatly and then run each funcition one after another
 6) End
**


 Agile Questions- Freddy
 **
 *1/14/2022
 What SPECIFIC task will you complete in the next half hour?
 1)The specific task that I will complete today is start a psuedo code and send to tyler
 What do you know about this SPECIFIC task?
 2)I know how to build a psuedo code
 What DON'T you know about this SPECIFIC task?
 3)I am not entirely sure where to start building the psuedo code

 *1/16/2022
 What SPECIFIC task will you complete in the next half hour?
 1)The specific Task that I want to work on is making sure we have a structure to lay out
 What do you know about this SPECIFIC task?
 2)We know what functions we are going to work with
 What DON'T you know about this SPECIFIC task?
 3)We dont know how each function is going to work yet

 *1/18/2022
 What SPECIFIC task will you complete in the next half hour?
 1)The specific task I will complete today is I am going to work on the add and edit function
 What do you know about this SPECIFIC task?
 2)I know that I am going to have to alter the array the stocks are beign held in
 What DON'T you know about this SPECIFIC task?
 3)I dont know just yet how to alter the array

 *1/21/2022
 What SPECIFIC task will you complete in the next half hour?
 1)The specific task I will complete today is test each function with tyler and go through code making sure we both understand it
 What do you know about this SPECIFIC task?
 2)I Know me and tyler are going to have to test each function
 What DON'T you know about this SPECIFIC task?
 3)I dont know which functions are going to have trouble or not
**


Agile Questions- Tyler

1/14/2022
1)We set out to build an idea of the different functions that this project would
require. We did this by writing psuedo code.
2)We know that this project is going to require arrays, user input, and the use of
pointers and references.
3)We don't know exactly how all the pieces are going to fit together at the moment.

1/16/2022
1)We will determine a display and process menu for control of the program.
2)We know what the individual functions will need to accomplish.
3)The specifics of each function are to be determined.

1/18/2022
1)The specific work I will working on right now is the sorting functions.
2)I know that I will be sorting an array based on a float value from high to low and from low to high.
3)I don't know how to copy and return arrays using pointers.

1/21/2022
1) Today Freddy and I will be testing the program using different methods.
2) We know that we will be testing edge cases and potential user errors that
might occur.
3)We don't know what bugs(if any) will present themselves.

 Meeting Times
 **
 *1/12/2022
 [Me and Tyler met during class and exchanged information]
 *1/14/2022
 [Got together and discussed the planning of the code]
 *1/16/2022
 [Got together to discusse the structing of the code and which functions would require the most attention]
 *1/18/2022
 [Got together after buliding functions and test each of them together]
 *1/21/2022
 [Got together after everything was built to test each function one after another and debug any errors]


Testing and Runs:

***Display test***

Enter the number of stocks you would like to initially enter: 2
Enter the name of the stock: apple
Enter the symbol of the stock: appl
Enter the price of the stock: 20
Enter the name of the stock: microsoft
Enter the symbol of the stock: mic
Enter the price of the stock: 1
1) Add a new stock to collection.
2) Remove a stock from the collectino.
3) Edit a stock price.
4) Sort stocks based on price from high to low.
5) Sort stocks based on price from low to high.
6) Display all stocks in the collection.
7) Exit Program.

Enter: 6
Stock name: apple
Stock symbol: appl
Stock price: $20
======================================
Stock name: microsoft
Stock symbol: mic
Stock price: $1
======================================

***Add stock test***

Enter: 1
Enter the name of the stock: intel
Enter the symbol of the stock: int
Enter the price of the stock: 34
1) Add a new stock to collection.
2) Remove a stock from the collectino.
3) Edit a stock price.
4) Sort stocks based on price from high to low.
5) Sort stocks based on price from low to high.
6) Display all stocks in the collection.
7) Exit Program.

Enter: 6
Stock name: apple
Stock symbol: appl
Stock price: $20
======================================
Stock name: microsoft
Stock symbol: mic
Stock price: $1
======================================
Stock name: intel
Stock symbol: int
Stock price: $34
======================================

***Sort low to high test***

Enter: 5
1) Add a new stock to collection.
2) Remove a stock from the collectino.
3) Edit a stock price.
4) Sort stocks based on price from high to low.
5) Sort stocks based on price from low to high.
6) Display all stocks in the collection.
7) Exit Program.

Enter: 6
Stock name: microsoft
Stock symbol: mic
Stock price: $1
======================================
Stock name: apple
Stock symbol: appl
Stock price: $20
======================================
Stock name: intel
Stock symbol: int
Stock price: $34
======================================


***Sort high to low test***

1) Add a new stock to collection.
2) Remove a stock from the collectino.
3) Edit a stock price.
4) Sort stocks based on price from high to low.
5) Sort stocks based on price from low to high.
6) Display all stocks in the collection.
7) Exit Program.

Enter: 4
1) Add a new stock to collection.
2) Remove a stock from the collectino.
3) Edit a stock price.
4) Sort stocks based on price from high to low.
5) Sort stocks based on price from low to high.
6) Display all stocks in the collection.
7) Exit Program.

Enter: 6
Stock name: intel
Stock symbol: int
Stock price: $34
======================================
Stock name: apple
Stock symbol: appl
Stock price: $20
======================================
Stock name: microsoft
Stock symbol: mic
Stock price: $1
======================================


***Remove stock test***

1) Add a new stock to collection.
2) Remove a stock from the collectino.
3) Edit a stock price.
4) Sort stocks based on price from high to low.
5) Sort stocks based on price from low to high.
6) Display all stocks in the collection.
7) Exit Program.

Enter: 2
Enter the name for the stock that you would like to remove: mic
1) Add a new stock to collection.
2) Remove a stock from the collectino.
3) Edit a stock price.
4) Sort stocks based on price from high to low.
5) Sort stocks based on price from low to high.
6) Display all stocks in the collection.
7) Exit Program.

Enter: 6
Stock name: intel
Stock symbol: int
Stock price: $34
======================================
Stock name: apple
Stock symbol: appl
Stock price: $20
======================================
